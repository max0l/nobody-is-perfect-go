// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a game tied to a user
	// (GET /api/create/game)
	GetApiCreateGame(c *gin.Context)
	// Create a new user
	// (POST /api/create/user)
	PostApiCreateUser(c *gin.Context)
	// Get the answers for the game
	// (GET /api/game/{gameId}/answers)
	GetApiGameGameIdAnswers(c *gin.Context, gameId string)
	// Send an answer for the game
	// (POST /api/game/{gameId}/answers)
	PostApiGameGameIdAnswers(c *gin.Context, gameId string)
	// Select valid answers for the game
	// (POST /api/game/{gameId}/answers/selectValids)
	PostApiGameGameIdAnswersSelectValids(c *gin.Context, gameId string)
	// Finish the game
	// (GET /api/game/{gameId}/finish)
	GetApiGameGameIdFinish(c *gin.Context, gameId string)
	// Move to the next round in the game
	// (GET /api/game/{gameId}/next)
	GetApiGameGameIdNext(c *gin.Context, gameId string)
	// Reveal the answers and votes in the game
	// (GET /api/game/{gameId}/reveal)
	GetApiGameGameIdReveal(c *gin.Context, gameId string)
	// Start the game
	// (GET /api/game/{gameId}/start)
	GetApiGameGameIdStart(c *gin.Context, gameId string)
	// Get the status of the game
	// (GET /api/game/{gameId}/status)
	GetApiGameGameIdStatus(c *gin.Context, gameId string)
	// Vote for an answer in the game
	// (POST /api/game/{gameId}/vote)
	PostApiGameGameIdVote(c *gin.Context, gameId string)
	// Health check
	// (GET /api/health)
	GetApiHealth(c *gin.Context)
	// Join a game
	// (GET /api/join/{gameId})
	GetApiJoinGameId(c *gin.Context, gameId string)
	// Gets the play order of the users for the game
	// (GET /api/order/{gameId})
	GetApiOrderGameId(c *gin.Context, gameId string)
	// Set the play order for the game
	// (PUT /api/order/{gameId})
	PutApiOrderGameId(c *gin.Context, gameId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiCreateGame operation middleware
func (siw *ServerInterfaceWrapper) GetApiCreateGame(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiCreateGame(c)
}

// PostApiCreateUser operation middleware
func (siw *ServerInterfaceWrapper) PostApiCreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiCreateUser(c)
}

// GetApiGameGameIdAnswers operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdAnswers(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdAnswers(c, gameId)
}

// PostApiGameGameIdAnswers operation middleware
func (siw *ServerInterfaceWrapper) PostApiGameGameIdAnswers(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiGameGameIdAnswers(c, gameId)
}

// PostApiGameGameIdAnswersSelectValids operation middleware
func (siw *ServerInterfaceWrapper) PostApiGameGameIdAnswersSelectValids(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiGameGameIdAnswersSelectValids(c, gameId)
}

// GetApiGameGameIdFinish operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdFinish(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdFinish(c, gameId)
}

// GetApiGameGameIdNext operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdNext(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdNext(c, gameId)
}

// GetApiGameGameIdReveal operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdReveal(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdReveal(c, gameId)
}

// GetApiGameGameIdStart operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdStart(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdStart(c, gameId)
}

// GetApiGameGameIdStatus operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdStatus(c, gameId)
}

// PostApiGameGameIdVote operation middleware
func (siw *ServerInterfaceWrapper) PostApiGameGameIdVote(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiGameGameIdVote(c, gameId)
}

// GetApiHealth operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealth(c)
}

// GetApiJoinGameId operation middleware
func (siw *ServerInterfaceWrapper) GetApiJoinGameId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJoinGameId(c, gameId)
}

// GetApiOrderGameId operation middleware
func (siw *ServerInterfaceWrapper) GetApiOrderGameId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiOrderGameId(c, gameId)
}

// PutApiOrderGameId operation middleware
func (siw *ServerInterfaceWrapper) PutApiOrderGameId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiOrderGameId(c, gameId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/create/game", wrapper.GetApiCreateGame)
	router.POST(options.BaseURL+"/api/create/user", wrapper.PostApiCreateUser)
	router.GET(options.BaseURL+"/api/game/:gameId/answers", wrapper.GetApiGameGameIdAnswers)
	router.POST(options.BaseURL+"/api/game/:gameId/answers", wrapper.PostApiGameGameIdAnswers)
	router.POST(options.BaseURL+"/api/game/:gameId/answers/selectValids", wrapper.PostApiGameGameIdAnswersSelectValids)
	router.GET(options.BaseURL+"/api/game/:gameId/finish", wrapper.GetApiGameGameIdFinish)
	router.GET(options.BaseURL+"/api/game/:gameId/next", wrapper.GetApiGameGameIdNext)
	router.GET(options.BaseURL+"/api/game/:gameId/reveal", wrapper.GetApiGameGameIdReveal)
	router.GET(options.BaseURL+"/api/game/:gameId/start", wrapper.GetApiGameGameIdStart)
	router.GET(options.BaseURL+"/api/game/:gameId/status", wrapper.GetApiGameGameIdStatus)
	router.POST(options.BaseURL+"/api/game/:gameId/vote", wrapper.PostApiGameGameIdVote)
	router.GET(options.BaseURL+"/api/health", wrapper.GetApiHealth)
	router.GET(options.BaseURL+"/api/join/:gameId", wrapper.GetApiJoinGameId)
	router.GET(options.BaseURL+"/api/order/:gameId", wrapper.GetApiOrderGameId)
	router.PUT(options.BaseURL+"/api/order/:gameId", wrapper.PutApiOrderGameId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
