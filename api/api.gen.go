// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// PostApiCreateGameJSONBody defines parameters for PostApiCreateGame.
type PostApiCreateGameJSONBody struct {
	UserUUID *string `json:"userUUID,omitempty"`
}

// PostApiCreateUserJSONBody defines parameters for PostApiCreateUser.
type PostApiCreateUserJSONBody struct {
	Username *string `json:"username,omitempty"`
}

// PostApiGameGameIdAnswersJSONBody defines parameters for PostApiGameGameIdAnswers.
type PostApiGameGameIdAnswersJSONBody struct {
	Answer *string `json:"answer,omitempty"`
}

// PostApiGameGameIdAnswersSelectValidsJSONBody defines parameters for PostApiGameGameIdAnswersSelectValids.
type PostApiGameGameIdAnswersSelectValidsJSONBody struct {
	ValidAnswers *[]string `json:"validAnswers,omitempty"`
}

// PostApiGameGameIdStartJSONBody defines parameters for PostApiGameGameIdStart.
type PostApiGameGameIdStartJSONBody struct {
	UserUUID *string `json:"userUUID,omitempty"`
}

// PostApiGameGameIdVoteJSONBody defines parameters for PostApiGameGameIdVote.
type PostApiGameGameIdVoteJSONBody struct {
	AnswerUUID *string `json:"answerUUID,omitempty"`
}

// PostApiJoinGameIdJSONBody defines parameters for PostApiJoinGameId.
type PostApiJoinGameIdJSONBody struct {
	UserUUID *string `json:"userUUID,omitempty"`
}

// PutApiOrderGameIdJSONBody defines parameters for PutApiOrderGameId.
type PutApiOrderGameIdJSONBody struct {
	PlayOrder *[]struct {
		Place    *int    `json:"place,omitempty"`
		UserUUID *string `json:"userUUID,omitempty"`
	} `json:"playOrder,omitempty"`
}

// PostApiCreateGameJSONRequestBody defines body for PostApiCreateGame for application/json ContentType.
type PostApiCreateGameJSONRequestBody PostApiCreateGameJSONBody

// PostApiCreateUserJSONRequestBody defines body for PostApiCreateUser for application/json ContentType.
type PostApiCreateUserJSONRequestBody PostApiCreateUserJSONBody

// PostApiGameGameIdAnswersJSONRequestBody defines body for PostApiGameGameIdAnswers for application/json ContentType.
type PostApiGameGameIdAnswersJSONRequestBody PostApiGameGameIdAnswersJSONBody

// PostApiGameGameIdAnswersSelectValidsJSONRequestBody defines body for PostApiGameGameIdAnswersSelectValids for application/json ContentType.
type PostApiGameGameIdAnswersSelectValidsJSONRequestBody PostApiGameGameIdAnswersSelectValidsJSONBody

// PostApiGameGameIdStartJSONRequestBody defines body for PostApiGameGameIdStart for application/json ContentType.
type PostApiGameGameIdStartJSONRequestBody PostApiGameGameIdStartJSONBody

// PostApiGameGameIdVoteJSONRequestBody defines body for PostApiGameGameIdVote for application/json ContentType.
type PostApiGameGameIdVoteJSONRequestBody PostApiGameGameIdVoteJSONBody

// PostApiJoinGameIdJSONRequestBody defines body for PostApiJoinGameId for application/json ContentType.
type PostApiJoinGameIdJSONRequestBody PostApiJoinGameIdJSONBody

// PutApiOrderGameIdJSONRequestBody defines body for PutApiOrderGameId for application/json ContentType.
type PutApiOrderGameIdJSONRequestBody PutApiOrderGameIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a game tied to a user
	// (POST /api/create/game)
	PostApiCreateGame(c *gin.Context)
	// Create a new user
	// (POST /api/create/user)
	PostApiCreateUser(c *gin.Context)
	// Get the answers for the game
	// (GET /api/game/{gameId}/answers)
	GetApiGameGameIdAnswers(c *gin.Context, gameId string)
	// Send an answer for the game
	// (POST /api/game/{gameId}/answers)
	PostApiGameGameIdAnswers(c *gin.Context, gameId string)
	// Select valid answers for the game
	// (POST /api/game/{gameId}/answers/selectValids)
	PostApiGameGameIdAnswersSelectValids(c *gin.Context, gameId string)
	// Finish the game
	// (GET /api/game/{gameId}/finish)
	GetApiGameGameIdFinish(c *gin.Context, gameId string)
	// Move to the next round in the game
	// (GET /api/game/{gameId}/next)
	GetApiGameGameIdNext(c *gin.Context, gameId string)
	// Reveal the answers and votes in the game
	// (GET /api/game/{gameId}/reveal)
	GetApiGameGameIdReveal(c *gin.Context, gameId string)
	// Start the game
	// (POST /api/game/{gameId}/start)
	PostApiGameGameIdStart(c *gin.Context, gameId string)
	// Get the status of the game
	// (GET /api/game/{gameId}/status)
	GetApiGameGameIdStatus(c *gin.Context, gameId string)
	// Vote for an answer in the game
	// (POST /api/game/{gameId}/vote)
	PostApiGameGameIdVote(c *gin.Context, gameId string)
	// Health check
	// (GET /api/health)
	GetApiHealth(c *gin.Context)
	// Join a game
	// (POST /api/join/{gameId})
	PostApiJoinGameId(c *gin.Context, gameId string)
	// gets the play order of the users for the game
	// (GET /api/order/{gameId})
	GetApiOrderGameId(c *gin.Context, gameId struct {
		GameId *string `json:"gameId,omitempty"`
	})
	// Set the play order for the game
	// (PUT /api/order/{gameId})
	PutApiOrderGameId(c *gin.Context, gameId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiCreateGame operation middleware
func (siw *ServerInterfaceWrapper) PostApiCreateGame(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiCreateGame(c)
}

// PostApiCreateUser operation middleware
func (siw *ServerInterfaceWrapper) PostApiCreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiCreateUser(c)
}

// GetApiGameGameIdAnswers operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdAnswers(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdAnswers(c, gameId)
}

// PostApiGameGameIdAnswers operation middleware
func (siw *ServerInterfaceWrapper) PostApiGameGameIdAnswers(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiGameGameIdAnswers(c, gameId)
}

// PostApiGameGameIdAnswersSelectValids operation middleware
func (siw *ServerInterfaceWrapper) PostApiGameGameIdAnswersSelectValids(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiGameGameIdAnswersSelectValids(c, gameId)
}

// GetApiGameGameIdFinish operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdFinish(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdFinish(c, gameId)
}

// GetApiGameGameIdNext operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdNext(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdNext(c, gameId)
}

// GetApiGameGameIdReveal operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdReveal(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdReveal(c, gameId)
}

// PostApiGameGameIdStart operation middleware
func (siw *ServerInterfaceWrapper) PostApiGameGameIdStart(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiGameGameIdStart(c, gameId)
}

// GetApiGameGameIdStatus operation middleware
func (siw *ServerInterfaceWrapper) GetApiGameGameIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGameGameIdStatus(c, gameId)
}

// PostApiGameGameIdVote operation middleware
func (siw *ServerInterfaceWrapper) PostApiGameGameIdVote(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiGameGameIdVote(c, gameId)
}

// GetApiHealth operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealth(c)
}

// PostApiJoinGameId operation middleware
func (siw *ServerInterfaceWrapper) PostApiJoinGameId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiJoinGameId(c, gameId)
}

// GetApiOrderGameId operation middleware
func (siw *ServerInterfaceWrapper) GetApiOrderGameId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId struct {
		GameId *string `json:"gameId,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiOrderGameId(c, gameId)
}

// PutApiOrderGameId operation middleware
func (siw *ServerInterfaceWrapper) PutApiOrderGameId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiOrderGameId(c, gameId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/create/game", wrapper.PostApiCreateGame)
	router.POST(options.BaseURL+"/api/create/user", wrapper.PostApiCreateUser)
	router.GET(options.BaseURL+"/api/game/:gameId/answers", wrapper.GetApiGameGameIdAnswers)
	router.POST(options.BaseURL+"/api/game/:gameId/answers", wrapper.PostApiGameGameIdAnswers)
	router.POST(options.BaseURL+"/api/game/:gameId/answers/selectValids", wrapper.PostApiGameGameIdAnswersSelectValids)
	router.GET(options.BaseURL+"/api/game/:gameId/finish", wrapper.GetApiGameGameIdFinish)
	router.GET(options.BaseURL+"/api/game/:gameId/next", wrapper.GetApiGameGameIdNext)
	router.GET(options.BaseURL+"/api/game/:gameId/reveal", wrapper.GetApiGameGameIdReveal)
	router.POST(options.BaseURL+"/api/game/:gameId/start", wrapper.PostApiGameGameIdStart)
	router.GET(options.BaseURL+"/api/game/:gameId/status", wrapper.GetApiGameGameIdStatus)
	router.POST(options.BaseURL+"/api/game/:gameId/vote", wrapper.PostApiGameGameIdVote)
	router.GET(options.BaseURL+"/api/health", wrapper.GetApiHealth)
	router.POST(options.BaseURL+"/api/join/:gameId", wrapper.PostApiJoinGameId)
	router.GET(options.BaseURL+"/api/order/:gameId", wrapper.GetApiOrderGameId)
	router.PUT(options.BaseURL+"/api/order/:gameId", wrapper.PutApiOrderGameId)
}
