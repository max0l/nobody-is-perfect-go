openapi: 3.0.4
info:
  version: 0.0.1
  title: Nobody is Perfect - Go
  description: |-
    Simple Web application to make the sharing of written text easier.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: UUID

  schemas:
    UUID:
      type: string
      minLength: 36
      maxLength: 36
      example: "123e4567-e89b-12d3-a456-426614174000"
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/google/uuid

    BadRequestResponse:
      type: object
      properties:
        error:
          type: string
          example: "Bad request, missing required fields"

    UnauthorizedResponse:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized, invalid or missing token"

    ForbiddenResponse:
      type: object
      properties:
        error:
          type: string
          example: "Forbidden, you do not have permission to access this resource"

    GameNotFoundResponse:
      type: object
      properties:
        error:
          type: string
          example: "Game not found, please check the game ID"

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: "OK"

    User:
      type: object
      properties:
        userUUID:
          $ref: "#/components/schemas/UUID"
        username:
          type: string
          example: "john_doe"

    UserToken:
      type: object
      properties:
        userUUID:
          $ref: "#/components/schemas/UUID"
        userToken:
          $ref: "#/components/schemas/UUID"

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"

    GameCreatedResponse:
      type: object
      properties:
        gameId:
          type: string
          example: "chug.value.funds"

    JoinGameResponse:
      type: object
      properties:
        message:
          type: string
          example: "User successfully joined the game"

    PlayOrderUser:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        place:
          type: integer
          example: 1
        userUUID:
          $ref: "#/components/schemas/UUID"

    PlayOrderResponse:
      type: object
      properties:
        playOrder:
          type: array
          items:
            $ref: "#/components/schemas/PlayOrderUser"

    SetPlayOrderRequest:
      type: object
      properties:
        playOrder:
          type: array
          items:
            type: object
            properties:
              userUUID:
                $ref: "#/components/schemas/UUID"
              place:
                type: integer
                example: 1

    PlayOrderSetResponse:
      type: object
      properties:
        message:
          type: string
          example: "Play order set successfully"

    GameStartedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Game started successfully"

    GameFinishedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Game finished successfully"

    NextRoundResponse:
      type: object
      properties:
        message:
          type: string
          example: "Moved to the next round successfully"

    AnswerReceivedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Received the answer"

    ValidAnswersSelectedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Valid answers selected successfully"

    VoteRecordedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Vote recorded successfully"

    GameStatusResponse:
      type: object
      properties:
        status:
          type: integer
          example: 1
          description: Status of the game
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        gameMasterUUID:
          $ref: "#/components/schemas/UUID"
        receivedAnswers:
          type: integer
          example: 3
          description: Get the number of answers received from the players

    AnswerRequest:
      type: object
      properties:
        answer:
          type: string
          example: "This is my answer to the question"

    AnswersResponse:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"

    Answer:
      type: object
      properties:
        answerUUID:
          $ref: "#/components/schemas/UUID"
        answer:
          type: string
          example: "A: This is my answer to the question"

    SelectValidAnswersRequest:
      type: object
      properties:
        validAnswers:
          type: array
          items:
            $ref: "#/components/schemas/UUID"

    VoteRequest:
      type: object
      properties:
        answerUUID:
          $ref: "#/components/schemas/UUID"

    RevealVotesResponse:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: "#/components/schemas/AnswerWithVotes"

    AnswerWithVotes:
      type: object
      properties:
        answerUUID:
          $ref: "#/components/schemas/UUID"
        answer:
          type: string
          example: "A: This is my answer to the question"
        votes:
          type: array
          items:
            $ref: "#/components/schemas/VoteUser"

    VoteUser:
      type: object
      properties:
        userUUID:
          $ref: "#/components/schemas/UUID"
        username:
          type: string
          example: "john_doe"

paths:
  /api/health:
    get:
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"

  /api/create/user:
    post:
      summary: Create a new user
      description: Will create a new user with a UUID
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserToken"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"

  /api/create/game:
    post:
      summary: Create a game tied to a user
      description: Will create a new game for the user with a UUID
      operationId: createGame
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Game created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameCreatedResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"

  /api/join/{gameId}:
    post:
      summary: Join a game
      description: Will allow a user to join an existing game
      operationId: joinGame
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: User joined the game
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JoinGameResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/order/{gameId}:
    get:
      summary: Gets the play order of the users for the game
      description: Will return the play order of the users for the game
      operationId: getPlayOrder
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: Play order retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayOrderResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

    put:
      summary: Set the play order for the game
      description: Will set the play order for the game
      operationId: setPlayOrder
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPlayOrderRequest"
      responses:
        '200':
          description: Play order set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayOrderSetResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/start:
    post:
      summary: Start the game
      description: Will start the game for the users
      operationId: startGame
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: Game started successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameStartedResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/status:
    get:
      summary: Get the status of the game
      description: Will return the status of the game including users and game master
      operationId: getGameStatus
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: Status of the game
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameStatusResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/answers:
    post:
      summary: Send an answer for the game
      description: Will allow a user to send an answer for the game
      operationId: sendAnswer
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerRequest"
      responses:
        '200':
          description: Received the answer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerReceivedResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

    get:
      summary: Get the answers for the game
      description: Will return the answers for the game only if you are game master
      operationId: getAnswers
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: Answers retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswersResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/answers/selectValids:
    put:
      summary: Select valid answers for the game
      description: Will allow the game master to select valid answers for the game
      operationId: selectValidAnswers
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectValidAnswersRequest"
      responses:
        '200':
          description: Valid answers selected successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidAnswersSelectedResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/vote:
    post:
      summary: Vote for an answer in the game
      description: Will allow a user to vote for an answer in the game
      operationId: voteForAnswer
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteRequest"
      responses:
        '200':
          description: Vote recorded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoteRecordedResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/reveal:
    get:
      summary: Reveal the answers and votes in the game
      description: Will reveal the answers and votes in the game
      operationId: revealVotes
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: Answers and votes revealed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevealVotesResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/next:
    post:
      summary: Move to the next round in the game
      description: Will allow the game to move to the next round
      operationId: nextRound
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: Moved to the next round successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NextRoundResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"

  /api/game/{gameId}/finish:
    post:
      summary: Finish the game
      description: Will finish the game and clean up resources
      operationId: finishGame
      security:
        - BearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            example: "chug.value.funds"
      responses:
        '200':
          description: Game finished successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameFinishedResponse"
        '400':
          description: Bad request, missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameNotFoundResponse"
